import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from handlers.weather_module import WeatherHandler
from db import init_db, upsert_user, get_user_language, set_user_language

init_db()

load_dotenv()

bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()
weather_handler = WeatherHandler()

TEXTS = {
    'uk': {
        'welcome': "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞, —ñ —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –õ—å–≤—ñ–≤, –û–¥–µ—Å–∞",
        'help': "üìñ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:\n\n1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞\n2. –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n/language - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        'wait': "‚è≥ –û—Ç—Ä–∏–º—É—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏...",
        'choose_lang': "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:",
        'lang_set': "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É üá∫üá¶",
        'unknown': "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º—ñ—Å—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    },
    'en': {
        'welcome': "üëã Hi! I'm a weather forecast bot.\n\nJust type the name of a city and I'll show you the weekly weather forecast.\nFor example: Kyiv, Lviv, Odesa",
        'help': "üìñ How to use the bot:\n\n1. Just type a city name\n2. Get a detailed weekly weather forecast\n\nAvailable commands:\n/start - Start using the bot\n/help - Show this message\n/language - Change language",
        'wait': "‚è≥ Getting the weather forecast...",
        'choose_lang': "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:",
        'lang_set': "Language set to English üá¨üáß",
        'unknown': "Could not recognize the city. Please try again."
    }
}

lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶"), KeyboardButton(text="English üá¨üáß")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    upsert_user(message.from_user.id, message.from_user.username)
    lang = get_user_language(message.from_user.id)
    await message.answer(TEXTS[lang]['welcome'])

@dp.message(Command("help"))
async def cmd_help(message: Message):
    upsert_user(message.from_user.id, message.from_user.username)
    lang = get_user_language(message.from_user.id)
    await message.answer(TEXTS[lang]['help'])

@dp.message(Command("language"))
async def cmd_language(message: Message):
    upsert_user(message.from_user.id, message.from_user.username)
    lang = get_user_language(message.from_user.id)
    await message.answer(TEXTS[lang]['choose_lang'], reply_markup=lang_keyboard)

@dp.message(lambda m: m.text in ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", "English üá¨üáß"])
async def set_language_cmd(message: Message):
    lang = 'uk' if message.text == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶" else 'en'
    set_user_language(message.from_user.id, lang)
    upsert_user(message.from_user.id, message.from_user.username, lang)
    await message.answer(TEXTS[lang]['lang_set'], reply_markup=types.ReplyKeyboardRemove())

@dp.message()
async def handle_message(message: Message):
    upsert_user(message.from_user.id, message.from_user.username)
    lang = get_user_language(message.from_user.id)
    city = message.text.strip()
    await message.answer(TEXTS[lang]['wait'])
    forecast = weather_handler.get_weather_forecast(city, lang=lang)
    await message.answer(forecast)

async def main():
    init_db()
    print("Bot started...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
